#Generate a ssh key for login to your server. Remember to close the login with password.

#sshkeygen
ssh-keygen -t ecdsa -b 521

#copy ssh key to server
ssh-copy-id -i ~/.ssh/tatu-key-ecdsa user@host

#login to server using ssh key
ssh -i ~/.ssh/old_keys/host2_key username@host2.somewhere.edu

__________________________________________________________________________________________________________
#Linux VM configuration

sudo apt update
sudo apt upgrade
sudo apt install nginx
sudo apt install certbot

#if not startet yet, start nginx
sudo systemctl start nginx

#open browser in INCOGNITO MODE http (port:80) is running. https (port:443) is not running.

#Update your site if needed
sudo nano /var/www/html/index.html

_________________________________________________________________________________________________________
#change nginx-config 


#/etc/nginx/nginx.conf
# Generated by nginxconfig.io
# https://www.serverion.com/nginx-config/#?0.cert_type=custom&0.access_log_domain&0.error_log_domain

user www-data;
pid /run/nginx.pid;
worker_processes auto;
worker_rlimit_nofile 65535;

events {
	multi_accept on;
	worker_connections 65535;
}

http {
	charset utf-8;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	server_tokens off;
	log_not_found off;
	types_hash_max_size 2048;
	client_max_body_size 16M;

	# MIME
	include mime.types;
	default_type application/octet-stream;

	# logging
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log warn;

	# SSL
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;
	
	#HSTS
	#add_header Strict-Transport-Security "max-age=31536000; 
  	#includeSubDomains; preload" always;

	# Diffie-Hellman parameter for DHE ciphersuites
	ssl_dhparam /etc/nginx/dhparam.pem;
	ssl_ecdh_curve secp384r1;

	# Mozilla Intermediate configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# OCSP Stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
	resolver_timeout 2s;

	# load configs
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}



__________________________________________
#/etc/nginx/sites-enabled/default
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name server;
	root /var/www/html;
	
	# SSL
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.priv.key;
        ssl_client_certificate /etc/nginx/ssl/server.crt;
        ssl_verify_client on;


	# logging
	access_log /var/log/nginx/server.access.log;
	error_log /var/log/nginx/server.error.log warn;

	# index.html
	index index.html;

}

# subdomains redirect
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name server;

	# SSL
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.priv.key;


	return 301 https://localhost$request_uri;
}

# HTTP redirect
server {
	listen 80;
	listen [::]:80;

	server_name server;

	return 301 https://localhost$request_uri;
}



_________________________________________________________________________________________________________

#Generate Diffie-Hellman keys:
sudo openssl dhparam -out /etc/nginx/dhparam.pem 4096


#Generate server certificate:

#Let's start by creating the private key for the server. We achieve this with the following line. The key has a key length of 4096 bits and is saved with the file name server.priv.key.

openssl genrsa -out server.priv.key 4096


#Then we create the Certificate Signing Request. 

openssl req -new -key server.priv.key -out server.csr

FQDN: octotaub (Only option which has to be filled)
PW is optional

#After that, you can easily sign the key yourself to get a valid server certificate. This is how it works:

openssl x509 -in server.csr -out server.crt  -req -signkey server.priv.key -days 365

#The certificate is valid for 365 days and is saved as server.crt. The files server.crt and server.priv.key are stored in a path accessible to the web server, e.g. /etc/nginx/ssl.

sudo mkdir /etc/nginx/ssl
sudo cp server.* /etc/nginx/ssl

#Create user and client certificate

#Now we need the certificate for the client. To be able to issue the certificate properly, we configure openSSL a bit. To do this, we execute the following line:

#Create Client Certificate
sudo sed -i 's/= .\/demoCA/= \/root\/ca/g' /etc/ssl/openssl.cnf
#alternatively openssl genrsa -out client.key.pem 4096 and also change the path in /etc/ssl/openssl.cnf in line 42 by hand.

#Then we create the necessary directories and files.
sudo su
mkdir /root/ca
cd /root/ca
mkdir certs crl csr newcerts private
touch index.txt
echo 1000 > serial

#switch to normal user

#From now on we can finally start with the user certificate. Simply execute the following commands in order:
#Create Private Key
openssl genrsa -des3 -out user_test_cert.key

#create request
openssl req -new -key user_test_cert.key -out user_test_cert.req

#and sign with ca of the server
openssl ca -cert /etc/nginx/ssl/server.crt -keyfile /etc/nginx/ssl/server.priv.key -out user_test_cert.crt -in user_test_cert.req


#We have now created the user certificate, but it cannot be used yet. We still have to put it into a format that the browsers can understand and import. The p12 format is usually used for this. The following line generates what we need. It also asks for an export password. Of course, we choose a reasonable one according to the usual rules of art, so as not to get a password that is too lax. This includes 12 characters in length, including special characters, upper and lower case as well as numbers.


openssl pkcs12 -export -inkey user_test_cert.key -name "User_test" -in user_test_cert.crt -certfile /etc/nginx/ssl/server.crt -out user_test_cert.p12

#The file user_test_cert_p12 must now be made available to the corresponding user who is to be able to visit the website, together with the corresponding export password. Importing without a password is not possible!


#Enable Cert-Auth web server
#To make the webserver use the certificate authentication, set a directive in the .conf of the vHost.(see above)
#Now restart the web server

sudo systemctl restart nginx
sudo systemctl status nginx


#congratulations! 
#try using a valid CA instead of a self signed certificate
