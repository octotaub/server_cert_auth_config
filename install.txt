#sshkeygen
ssh-keygen -t ecdsa -b 521

#key auf Server kopieren
ssh-copy-id -i ~/.ssh/tatu-key-ecdsa user@host

#login to server using ssh key
ssh -i ~/.ssh/old_keys/host2_key username@host2.somewhere.edu

__________________________________________________________________________________________________________
#VM konfigurieren
sudo apt update
sudo apt upgrade
sudo apt install nginx
sudo apt install certbot

#falls noch nicht automatisch gestartet
sudo systemctl start nginx



#Browser öffnen :80 läuft
#:443 läuft nicht



_________________________________________________________________________________________________________
#nginx-config anpassen


#/etc/nginx/nginx.conf
# Generated by nginxconfig.io
# https://www.serverion.com/nginx-config/#?0.cert_type=custom&0.access_log_domain&0.error_log_domain

user www-data;
pid /run/nginx.pid;
worker_processes auto;
worker_rlimit_nofile 65535;

events {
	multi_accept on;
	worker_connections 65535;
}

http {
	charset utf-8;
	sendfile on;
	tcp_nopush on;
	tcp_nodelay on;
	server_tokens off;
	log_not_found off;
	types_hash_max_size 2048;
	client_max_body_size 16M;

	# MIME
	include mime.types;
	default_type application/octet-stream;

	# logging
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log warn;

	# SSL
	ssl_session_timeout 1d;
	ssl_session_cache shared:SSL:10m;
	ssl_session_tickets off;

	# Diffie-Hellman parameter for DHE ciphersuites
	ssl_dhparam /etc/nginx/dhparam.pem;

	# Mozilla Intermediate configuration
	ssl_protocols TLSv1.2 TLSv1.3;
	ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

	# OCSP Stapling
	ssl_stapling on;
	ssl_stapling_verify on;
	resolver 1.1.1.1 1.0.0.1 8.8.8.8 8.8.4.4 208.67.222.222 208.67.220.220 valid=60s;
	resolver_timeout 2s;

	# load configs
	include /etc/nginx/conf.d/*.conf;
	include /etc/nginx/sites-enabled/*;
}



__________________________________________
#/etc/nginx/sites-enabled/default
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name server;
	set $base /var/www/html;
	root $base/public;

	# SSL
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.priv.key;
    ssl_client_certificate /etc/nginx/ssl/server.crt;
    ssl_verify_client on;


	# logging
	access_log /var/log/nginx/server.access.log;
	error_log /var/log/nginx/server.error.log warn;

	# index.html
	index index.html;

}

# subdomains redirect
server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name server;

	# SSL
	ssl_certificate /etc/nginx/ssl/server.crt;
	ssl_certificate_key /etc/nginx/ssl/server.priv.key;


	return 301 https://localhost$request_uri;
}

# HTTP redirect
server {
	listen 80;
	listen [::]:80;

	server_name server;

	return 301 https://localhost$request_uri;
}



_________________________________________________________________________________________________________

#Generate Diffie-Hellman keys:
sudo openssl dhparam -out /etc/nginx/dhparam.pem 2048

#Ein zufälliges PW erstellen um (Root-)CA (server.priv.key) zu schützen
##openssl rand -base64 32 > mypass.enc

#Serverzertifikat erstellen:

#Beginnen wir damit den Private-Key für den Server zu erzeugen. Das erreichen wir mit folgender Zeile. Der Key hat eine Schlüssellänge von 4096 Bit und wird mit dem Dateinamen server.priv.key gespeichert.

#openssl genrsa -des3 -passout file:mypass.enc -out server.priv.key 4096
openssl genrsa -des3  -out server.priv.key 4096

#Danach erstellen wir das Certificate Signing Request. CA erstellen
#openssl req -new -x509 -days 365 -key server.priv.key -out server.csr -passin file:mypass.enc

openssl req -new -key server.priv.key -out server.csr

DE
NRW
colenio
FQDN: st
PW ist optional

#Danach kann man ganz einfach den Key selbst signieren, um ein gültiges Serverzertifikat zu erhalten. Das geht so:

openssl x509 -in server.csr -out server.crt  -req -signkey server.priv.key -days 365

#Das Zertifikat ist 365 Tage gültig und wird als server.crt abgespeichert. Die Dateien server.crt und server.priv.key in ein für den Webserver zugänglichen Pfad abgelegen bspw. /etc/nginx/ssl.
sudo mkdir /etc/nginx/ssl
sudo mv server.* /etc/nginx/ssl

#Benutzer- bzw. Clientzertifikat erstellen

#Jetzt brauchen wir noch das Zertifikat für den Client. Damit wir uns das Zertifikat gescheit ausstellen können, konfigurieren wir uns openSSL ein bisschen. Dazu führen wir folgende Zeile aus:

#Client Zertifikat erstellen
sudo sed -i 's/= .\/demoCA/= \/root\/ca/g' /etc/ssl/openssl.cnf
#alternativ openssl genrsa -out client.key.pem 4096 und auch in der /etc/ssl/openssl.cnf in Zeile 42 den Pfad per Hand ändern.

#Danach legen wir noch die notwendigen Verzeichnisse und Dateien an.
sudo su
mkdir /root/ca
cd /root/ca
mkdir certs crl csr newcerts private
touch index.txt
echo 1000 > serial


#Ab jetzt können wir endlich mit dem Benutzer-Zertifikat beginnen. Einfach die folgenden Kommandos der Reihe nach ausführen:
#Private Key erzeugen
openssl genrsa -des3 -out user_stefan_cert.key

#request erstellen
openssl req -new -key user_stefan_cert.key -out user_stefan_cert.req

#und mit ca des servers signieren
openssl ca -cert /etc/nginx/ssl/server.crt -keyfile /etc/nginx/ssl/server.priv.key -out user_stefan_cert.crt -in user_stefan_cert.req


#Jetzt haben wir das Benutzerzertifikat erzeugt, aber es geht so noch nicht zu verwenden. Wir müssen es noch in ein Format bringen, welches die Browser verstehen und importieren können. Dazu nutzt man üblicherweise das p12-#Format. Folgende Zeile erzeugt uns was wir brauchen. Außerdem wird ein Export-Passwort abgefragt. Wir wählen natürlich ein vernünftiges nach dem üblichen Regeln der Kunst, um kein zu lasches Passwort zu erhalten. Dazu #gehören 12 Zeichen Länge, inbegriffen Sonderzeichen, Groß- und Kleinschreibung sowie Zahlen.


openssl pkcs12 -export -inkey user_stefan_cert.key -name "User_Stefan" -in user_stefan_cert.crt -certfile /etc/nginx/ssl/server.crt -out user_stefan_cert.p12

#Die Datei user_stefan_cert_p12 muss nun dem entsprechenden Benutzer, der die Website besuchen können soll, zur Verfügung gestellt werden samt dem dazugehörigen Export-Passwort. Ein Import ohne Passwort ist nicht möglich!


#Webserver Cert-Auth aktivieren
#Damit der Webserver die Zertifikatsauthentifikation nutzt, ist eine Direktive in der .conf des vHosts zu setzen.
#nun Webserver neustarten

sudo systemctl restart nginx
sudo systemctl status nginx
